Use git clone to download source.
Create tizen-image directory and unzip&copy the required image files. (As in proj0)
Enter cloned source directory and git switch to proj2 branch.
The directory structure should look like

dir_root/
------osfall2021-team1-proj3/
------------qemu.sh
------------generate.sh (Automated kernel building and image movement script)
------------kernel/
------------------rotation.c & rotation.h (Define syscall function & lock mechanisms)
------------------exit.c (Add exit_rotlock to automatically release every lock when process end)
------------arch/arm64/include/asm 
------------------unistd.h (Increased the number of syscalls)
------------------unistd32.h, syscall.h  (Added syscall five locks)
------------------syscall.tbl  (Added syscall set_rotation,locks,unlocks)
------------test/
------------------Makefile (Also mounts & moves binaries into the root image.)
------------------selector.c (Infinitely looping program. write integer to integer file)(selector and trial sleep 1 sec every cycle)
------------------trial.c (Infinitely looping program. read from integer file and output prime factorization) 
------------------autorotaion.c (same as rotd.c provided)
------tizen-image/
------------.img files

------Building the OS------
Change "#define __WRR_SCHED_DEBUG 1" to 0 in kernel/sched/sched.h to disable debug messages (Default set to 1.)
Enter osfall2021-team1-proj3 and run ./generate.sh to build the kernel. (Requires root privileges)

------Building Test Files------
Enter osfall2021-team1-proj3/test and enter "make". (Requires root privileges)

To run the VM, change directory to osfall2021-team1-proj3 and run ./qemu.sh (Requires root privileges)
After booting run the copied binary in the root user home directory.

Test code usage example

mount -o rw,remount /dev/mmcblk0p2 /        -make qemu system writable
./autorotation &                            -start auto roataion
./selector <start_num> &                    -start selector make integer file and write new integer (sleep 1 sec)
./trial 0 &                                 -start trial and read from integer file and output prime factorization(sleep 1 sec)
./trial 1&
./syscall <systemcall> <pid> => call system call to certain pid ex) ./syscall 398~402 <degree> <range>
